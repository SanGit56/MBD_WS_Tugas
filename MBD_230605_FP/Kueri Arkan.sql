SELECT PLAT, JARAK_TEMPUH
FROM MOBIL_BEKAS
WHERE JARAK_TEMPUH > (
    SELECT AVG(JARAK_TEMPUH) FROM MOBIL_BEKAS
)

SELECT BRAND_MOBIL, COUNT(*) AS JUMLAH_MOBIL_BEKAS
FROM MERK_MOBIL
JOIN MOBIL_BEKAS ON MERK_MOBIL.ID_MERK_MOBIL = MOBIL_BEKAS.ID_MERK_MOBIL
GROUP BY BRAND_MOBIL
ORDER BY JUMLAH_MOBIL_BEKAS DESC;

SELECT mb.PLAT, mb.HARGA
FROM MOBIL_BEKAS mb
JOIN PEMILIK p ON mb.ID_PEMILIK = p.ID_PEMILIK
WHERE p.JENIS_KELAMIN = 'Male'
  AND mb.HARGA > (
    SELECT AVG(HARGA)
    FROM MOBIL_BEKAS
    WHERE ID_PEMILIK IN (
      SELECT ID_PEMILIK
      FROM PEMILIK
      WHERE JENIS_KELAMIN = 'Male'
    )
  );

SELECT C.KOTA_CABANG, J.NAMA_POSISI, AVG(DATE_PART('year', CURRENT_DATE) - DATE_PART('year', K.TANGGAL_LAHIR)) AS AVERAGE_AGE
FROM CABANG C
JOIN KARYAWAN K ON C.KOTA_CABANG = K.KOTA_CABANG
JOIN JOB_DESK J ON K.NAMA_POSISI = J.NAMA_POSISI
GROUP BY C.KOTA_CABANG, J.NAMA_POSISI;

CREATE OR REPLACE FUNCTION update_total_certifications()
  RETURNS TRIGGER AS $$
BEGIN
  IF TG_OP = 'INSERT' THEN
    UPDATE MERK_MOBIL
    SET JUMLAH_BEREDAR = JUMLAH_BEREDAR + 1
    WHERE ID_MERK_MOBIL = NEW.PLAT;
  ELSIF TG_OP = 'DELETE' THEN
    UPDATE MERK_MOBIL
    SET JUMLAH_BEREDAR = JUMLAH_BEREDAR - 1
    WHERE ID_MERK_MOBIL = OLD.PLAT;
  END IF;
  RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER certification_trigger
AFTER INSERT OR DELETE ON CERTIFICATION
FOR EACH ROW
EXECUTE FUNCTION update_total_certifications();

CREATE OR REPLACE FUNCTION calculate_total_car_price(owner_id INT)
  RETURNS FLOAT AS $$
DECLARE
  total_price FLOAT;
BEGIN
  SELECT SUM(HARGA) INTO total_price
  FROM MOBIL_BEKAS
  WHERE ID_PEMILIK = owner_id;

  RETURN total_price;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE PROCEDURE update_transaction_status(transaction_id INT)
AS $$
DECLARE
  total_amount FLOAT;
  transaction_status VARCHAR(10);
BEGIN
  SELECT TOTAL INTO total_amount
  FROM TRANSAKSI
  WHERE ID_TRANSAKSI = transaction_id;

  IF total_amount > 50000000 THEN
    transaction_status := 'APPROVED';
  ELSE
    transaction_status := 'PENDING';
  END IF;

  UPDATE TRANSAKSI
  SET STATUS = transaction_status
  WHERE ID_TRANSAKSI = transaction_id;
END;
$$ LANGUAGE plpgsql;